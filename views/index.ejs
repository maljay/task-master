<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %> - Dashboard
    </title>
    <link rel="stylesheet" type="text/css" href="/css/index.css">
</head>

<body>

    <header>
        <div id="userInfo"></div>
        <button id="logoutButton" class="button">Logout</button>
    </header>

    <h1>Task Master</h1>

    <div class="add">
        <button id="addBtn" class="button" onclick="showTaskForm()">+Add Task</button>
    </div>

    <div class="search">
        <input type="text" id="searchInput" placeholder="Search tasks...">
        <button id="searchButton" class="button">Search</button>
    </div>

    <p><b>Filter Tasks:</b></p>
    <div class="filter">
        <div>
            <label for="priorityFilter">Priority:</label>
            <select id="priorityFilter" onchange="filterTasks()">
                <option value="">All</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
            </select>

            <label for="dateFilter">&nbsp;Deadline:</label>
            <input type="date" id="dateFilter" onchange="filterTasks()">
        </div>
        <button id="clearFilterButton" class="button">Clear Filter</button>

    </div>

    <div class="table-container">
        <table id="taskTable">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Deadline</th>
                    <th>Priority</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Tasks will be dynamically populated here -->
            </tbody>
        </table>
    </div>

    <div id="taskContainer" class="modal" style="display: none;">
        <span id="close" title="Close Modal">Ã—</span>
        <h2 id="taskHeading">Update Task</h2>
        <form id="taskForm">
            <input type="hidden" id="taskId" name="taskId" required>
            <label for="taskTitle">Title:</label>
            <input type="text" id="taskTitle" name="title" required>

            <label for="taskDescription">Description:</label>
            <textarea id="taskDescription" name="description" required></textarea>

            <label for="taskDeadline">Deadline:</label>
            <input type="date" id="taskDeadline" name="deadline" required>

            <label for="taskPriority">Priority:</label>
            <select id="taskPriority" name="priority" required>
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
            </select>

            <button type="submit" class="button taskBtn">Update Task</button>
        </form>
    </div>

    <script>
        const token = localStorage.getItem('token');
        const userInfo = document.getElementById('userInfo');
        const logoutButton = document.getElementById('logoutButton');
        const closeTaskFormButton = document.getElementById('close');
        const taskTableBody = document.getElementById('taskTable').querySelector('tbody');
        const taskContainer = document.getElementById('taskContainer');
        const taskForm = document.getElementById('taskForm');

        async function displayUserInfo() {
            const response = await fetch('http://localhost:5000/api/auth/me', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const user = await response.json();
            if (user.username === undefined) {
                window.location.href = "/login";
            }
            userInfo.innerHTML = `Welcome, <b>${user.username}</b>`;
        }

        async function fetchTasks(filters = {}) {
            const queryString = new URLSearchParams(filters).toString();
            const response = await fetch(`http://localhost:5000/api/tasks${queryString ? '?' + queryString : ''}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const tasks = await response.json();
            renderTasks(tasks);
        }

        function renderTasks(tasks) {
            taskTableBody.innerHTML = '';
            tasks.forEach(task => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${task.title}</td>
                    <td>${task.description}</td>
                    <td>${new Date(task.deadline).toLocaleDateString()}</td>
                    <td>${task.priority}</td>
                    <td>
                        <button id="updateBtn" onclick="showTaskForm('${task._id}', '${task.title}', '${task.description}', '${task.deadline}', '${task.priority}')">Update</button>
                        <button id="delBtn" onclick="deleteTask('${task._id}')">Delete</button>
                    </td>
                `;
                taskTableBody.appendChild(row);
            });
        }

        function filterTasks() {
            const priority = document.getElementById('priorityFilter').value;
            const date = document.getElementById('dateFilter').value;
            const filters = {};
            if (priority) filters.priority = priority;
            if (date) filters.deadline = date;
            fetchTasks(filters);
        }

        function setupTaskForm(text) {
            document.getElementById("taskHeading").innerText = text;
            document.querySelector(".taskBtn").innerText = text;
        }

        function resetTaskForm() {
            document.getElementById('taskId').value = "";
            document.getElementById('taskTitle').value = "";
            document.getElementById('taskDescription').value = "";
            document.getElementById('taskDeadline').value = "";
            document.getElementById('taskPriority').value = "low";
        }

        function showTaskForm(id, title, description, deadline, priority) {
            if (id) {
                setupTaskForm('Update Task');
                document.getElementById('taskId').value = id;
                document.getElementById('taskTitle').value = title;
                document.getElementById('taskDescription').value = description;
                document.getElementById('taskDeadline').value = deadline.split('T')[0];
                document.getElementById('taskPriority').value = priority;
            } else {
                setupTaskForm('Add Task');
            }
            taskContainer.style.display = 'block';
        }

        taskForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const taskId = document.getElementById('taskId').value;
            const title = document.getElementById('taskTitle').value;
            const description = document.getElementById('taskDescription').value;
            const deadline = document.getElementById('taskDeadline').value;
            const priority = document.getElementById('taskPriority').value;

            let url = 'http://localhost:5000/api/tasks', correctMethod = 'POST';

            if (taskId) {
                url = `http://localhost:5000/api/tasks/${taskId}`;
                correctMethod = 'PUT';
            }

            const response = await fetch(url, {
                method: correctMethod,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ title, description, deadline, priority }),
            });

            if (response.ok) {
                alert(taskId ? 'Task updated successfully!' : 'Task added successfully!');
                taskContainer.style.display = 'none';
                fetchTasks();
            } else {
                const data = await response.json();
                alert(data.error);
            }
        });

        async function deleteTask(taskId) {
            const response = await fetch(`http://localhost:5000/api/tasks/${taskId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                alert('Task deleted successfully!');
                fetchTasks();
            } else {
                const data = await response.json();
                alert(data.error);
            }
        }

        document.getElementById('searchButton').addEventListener('click', async () => {
            const query = document.getElementById('searchInput').value;
            const response = await fetch(`http://localhost:5000/api/tasks/search?q=${query}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const tasks = await response.json();
            renderTasks(tasks);
        });

        document.getElementById('searchInput').addEventListener('input', () => {
            if (document.getElementById("searchInput").value == "") {
                fetchTasks();
            }

        });

        document.getElementById('clearFilterButton').addEventListener('click', () => {
            document.getElementById("priorityFilter").value = "";
            document.getElementById("dateFilter").value = "";
            fetchTasks();
        });

        closeTaskFormButton.addEventListener('click', () => {
            document.getElementById('taskContainer').style.display = 'none';
            resetTaskForm();
        });

        logoutButton.addEventListener('click', () => {
            localStorage.removeItem('token');
            window.location.href = "/login";
        });

        displayUserInfo();
        fetchTasks();
    </script>

</body>

</html>